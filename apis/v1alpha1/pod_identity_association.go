// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// PodIdentityAssociationSpec defines the desired state of PodIdentityAssociation.
//
// Amazon EKS Pod Identity associations provide the ability to manage credentials
// for your applications, similar to the way that Amazon EC2 instance profiles
// provide credentials to Amazon EC2 instances.
type PodIdentityAssociationSpec struct {

	// A unique, case-sensitive identifier that you provide to ensurethe idempotency
	// of the request.
	ClientRequestToken *string `json:"clientRequestToken,omitempty"`
	// The name of the cluster to create the EKS Pod Identity association in.
	ClusterName *string                                  `json:"clusterName,omitempty"`
	ClusterRef  *ackv1alpha1.AWSResourceReferenceWrapper `json:"clusterRef,omitempty"`
	// Disable the automatic sessions tags that are appended by EKS Pod Identity.
	//
	// EKS Pod Identity adds a pre-defined set of session tags when it assumes the
	// role. You can use these tags to author a single role that can work across
	// resources by allowing access to Amazon Web Services resources based on matching
	// tags. By default, EKS Pod Identity attaches six tags, including tags for
	// cluster name, namespace, and service account name. For the list of tags added
	// by EKS Pod Identity, see List of session tags added by EKS Pod Identity (https://docs.aws.amazon.com/eks/latest/userguide/pod-id-abac.html#pod-id-abac-tags)
	// in the Amazon EKS User Guide.
	//
	// Amazon Web Services compresses inline session policies, managed policy ARNs,
	// and session tags into a packed binary format that has a separate limit. If
	// you receive a PackedPolicyTooLarge error indicating the packed binary format
	// has exceeded the size limit, you can attempt to reduce the size by disabling
	// the session tags added by EKS Pod Identity.
	DisableSessionTags *bool `json:"disableSessionTags,omitempty"`
	// The name of the Kubernetes namespace inside the cluster to create the EKS
	// Pod Identity association in. The service account and the Pods that use the
	// service account must be in this namespace.
	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace"`
	// The Amazon Resource Name (ARN) of the IAM role to associate with the service
	// account. The EKS Pod Identity agent manages credentials to assume this role
	// for applications in the containers in the Pods that use this service account.
	RoleARN *string                                  `json:"roleARN,omitempty"`
	RoleRef *ackv1alpha1.AWSResourceReferenceWrapper `json:"roleRef,omitempty"`
	// The name of the Kubernetes service account inside the cluster to associate
	// the IAM credentials with.
	// +kubebuilder:validation:Required
	ServiceAccount *string `json:"serviceAccount"`
	// Metadata that assists with categorization and organization. Each tag consists
	// of a key and an optional value. You define both. Tags don't propagate to
	// any other cluster or Amazon Web Services resources.
	//
	// The following basic restrictions apply to tags:
	//
	//   - Maximum number of tags per resource – 50
	//
	//   - For each resource, each tag key must be unique, and each tag key can
	//     have only one value.
	//
	//   - Maximum key length – 128 Unicode characters in UTF-8
	//
	//   - Maximum value length – 256 Unicode characters in UTF-8
	//
	//   - If your tagging schema is used across multiple services and resources,
	//     remember that other services may have restrictions on allowed characters.
	//     Generally allowed characters are: letters, numbers, and spaces representable
	//     in UTF-8, and the following characters: + - = . _ : / @.
	//
	//   - Tag keys and values are case-sensitive.
	//
	//   - Do not use aws:, AWS:, or any upper or lowercase combination of such
	//     as a prefix for either keys or values as it is reserved for Amazon Web
	//     Services use. You cannot edit or delete tag keys or values with this prefix.
	//     Tags with this prefix do not count against your tags per resource limit.
	Tags map[string]*string `json:"tags,omitempty"`
	// The Amazon Resource Name (ARN) of the target IAM role to associate with the
	// service account. This role is assumed by using the EKS Pod Identity association
	// role, then the credentials for this role are injected into the Pod.
	//
	// When you run applications on Amazon EKS, your application might need to access
	// Amazon Web Services resources from a different role that exists in the same
	// or different Amazon Web Services account. For example, your application running
	// in “Account A” might need to access resources, such as Amazon S3 buckets
	// in “Account B” or within “Account A” itself. You can create a association
	// to access Amazon Web Services resources in “Account B” by creating two
	// IAM roles: a role in “Account A” and a role in “Account B” (which
	// can be the same or different account), each with the necessary trust and
	// permission policies. After you provide these roles in the IAM role and Target
	// IAM role fields, EKS will perform role chaining to ensure your application
	// gets the required permissions. This means Role A will assume Role B, allowing
	// your Pods to securely access resources like S3 buckets in the target account.
	TargetRoleARN *string `json:"targetRoleARN,omitempty"`
}

// PodIdentityAssociationStatus defines the observed state of PodIdentityAssociation
type PodIdentityAssociationStatus struct {
	// All CRs managed by ACK have a common `Status.ACKResourceMetadata` member
	// that is used to contain resource sync state, account ownership,
	// constructed ARN for the resource
	// +kubebuilder:validation:Optional
	ACKResourceMetadata *ackv1alpha1.ResourceMetadata `json:"ackResourceMetadata"`
	// All CRs managed by ACK have a common `Status.Conditions` member that
	// contains a collection of `ackv1alpha1.Condition` objects that describe
	// the various terminal states of the CR and its backend AWS service API
	// resource
	// +kubebuilder:validation:Optional
	Conditions []*ackv1alpha1.Condition `json:"conditions"`
	// The Amazon Resource Name (ARN) of the association.
	// +kubebuilder:validation:Optional
	AssociationARN *string `json:"associationARN,omitempty"`
	// The ID of the association.
	// +kubebuilder:validation:Optional
	AssociationID *string `json:"associationID,omitempty"`
	// The timestamp that the association was created at.
	// +kubebuilder:validation:Optional
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
	// The unique identifier for this EKS Pod Identity association for a target
	// IAM role. You put this value in the trust policy of the target role, in a
	// Condition to match the sts.ExternalId. This ensures that the target role
	// can only be assumed by this association. This prevents the confused deputy
	// problem. For more information about the confused deputy problem, see The
	// confused deputy problem (https://docs.aws.amazon.com/IAM/latest/UserGuide/confused-deputy.html)
	// in the IAM User Guide.
	//
	// If you want to use the same target role with multiple associations or other
	// roles, use independent statements in the trust policy to allow sts:AssumeRole
	// access from each role.
	// +kubebuilder:validation:Optional
	ExternalID *string `json:"externalID,omitempty"`
	// The most recent timestamp that the association was modified at.
	// +kubebuilder:validation:Optional
	ModifiedAt *metav1.Time `json:"modifiedAt,omitempty"`
	// If defined, the EKS Pod Identity association is owned by an Amazon EKS add-on.
	// +kubebuilder:validation:Optional
	OwnerARN *string `json:"ownerARN,omitempty"`
}

// PodIdentityAssociation is the Schema for the PodIdentityAssociations API
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="CLUSTER",type=string,priority=0,JSONPath=`.spec.clusterName`
// +kubebuilder:printcolumn:name="NAMESPACE",type=string,priority=0,JSONPath=`.spec.namespace`
// +kubebuilder:printcolumn:name="SERVICEACCOUNT",type=string,priority=0,JSONPath=`.spec.serviceAccount`
// +kubebuilder:printcolumn:name="ROLEARN",type=string,priority=1,JSONPath=`.spec.roleARN`
// +kubebuilder:printcolumn:name="ASSOCIATIONID",type=string,priority=1,JSONPath=`.status.associationID`
// +kubebuilder:printcolumn:name="Synced",type="string",priority=0,JSONPath=".status.conditions[?(@.type==\"ACK.ResourceSynced\")].status"
// +kubebuilder:printcolumn:name="Age",type="date",priority=0,JSONPath=".metadata.creationTimestamp"
type PodIdentityAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PodIdentityAssociationSpec   `json:"spec,omitempty"`
	Status            PodIdentityAssociationStatus `json:"status,omitempty"`
}

// PodIdentityAssociationList contains a list of PodIdentityAssociation
// +kubebuilder:object:root=true
type PodIdentityAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PodIdentityAssociation `json:"items"`
}

func init() {
	SchemeBuilder.Register(&PodIdentityAssociation{}, &PodIdentityAssociationList{})
}
