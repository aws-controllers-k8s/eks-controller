// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package access_entry

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/eks"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/eks-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EKS{}
	_ = &svcapitypes.AccessEntry{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeAccessEntryOutput
	resp, err = rm.sdkapi.DescribeAccessEntryWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeAccessEntry", err)
	if err != nil {
		if reqErr, ok := ackerr.AWSRequestFailure(err); ok && reqErr.StatusCode() == 404 {
			return nil, ackerr.NotFound
		}
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "ResourceNotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.AccessEntry.AccessEntryArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.AccessEntry.AccessEntryArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.AccessEntry.ClusterName != nil {
		ko.Spec.ClusterName = resp.AccessEntry.ClusterName
	} else {
		ko.Spec.ClusterName = nil
	}
	if resp.AccessEntry.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.AccessEntry.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.AccessEntry.KubernetesGroups != nil {
		f3 := []*string{}
		for _, f3iter := range resp.AccessEntry.KubernetesGroups {
			var f3elem string
			f3elem = *f3iter
			f3 = append(f3, &f3elem)
		}
		ko.Spec.KubernetesGroups = f3
	} else {
		ko.Spec.KubernetesGroups = nil
	}
	if resp.AccessEntry.ModifiedAt != nil {
		ko.Status.ModifiedAt = &metav1.Time{*resp.AccessEntry.ModifiedAt}
	} else {
		ko.Status.ModifiedAt = nil
	}
	if resp.AccessEntry.PrincipalArn != nil {
		ko.Spec.PrincipalARN = resp.AccessEntry.PrincipalArn
	} else {
		ko.Spec.PrincipalARN = nil
	}
	if resp.AccessEntry.Tags != nil {
		f6 := map[string]*string{}
		for f6key, f6valiter := range resp.AccessEntry.Tags {
			var f6val string
			f6val = *f6valiter
			f6[f6key] = &f6val
		}
		ko.Spec.Tags = f6
	} else {
		ko.Spec.Tags = nil
	}
	if resp.AccessEntry.Type != nil {
		ko.Spec.Type = resp.AccessEntry.Type
	} else {
		ko.Spec.Type = nil
	}
	if resp.AccessEntry.Username != nil {
		ko.Spec.Username = resp.AccessEntry.Username
	} else {
		ko.Spec.Username = nil
	}

	rm.setStatusDefaults(ko)
	if err := rm.setResourceAdditionalFields(ctx, ko); err != nil {
		return nil, err
	}
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.ClusterName == nil || r.ko.Spec.PrincipalARN == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeAccessEntryInput, error) {
	res := &svcsdk.DescribeAccessEntryInput{}

	if r.ko.Spec.ClusterName != nil {
		res.SetClusterName(*r.ko.Spec.ClusterName)
	}
	if r.ko.Spec.PrincipalARN != nil {
		res.SetPrincipalArn(*r.ko.Spec.PrincipalARN)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateAccessEntryOutput
	_ = resp
	resp, err = rm.sdkapi.CreateAccessEntryWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateAccessEntry", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.AccessEntry.AccessEntryArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.AccessEntry.AccessEntryArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.AccessEntry.ClusterName != nil {
		ko.Spec.ClusterName = resp.AccessEntry.ClusterName
	} else {
		ko.Spec.ClusterName = nil
	}
	if resp.AccessEntry.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.AccessEntry.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.AccessEntry.KubernetesGroups != nil {
		f3 := []*string{}
		for _, f3iter := range resp.AccessEntry.KubernetesGroups {
			var f3elem string
			f3elem = *f3iter
			f3 = append(f3, &f3elem)
		}
		ko.Spec.KubernetesGroups = f3
	} else {
		ko.Spec.KubernetesGroups = nil
	}
	if resp.AccessEntry.ModifiedAt != nil {
		ko.Status.ModifiedAt = &metav1.Time{*resp.AccessEntry.ModifiedAt}
	} else {
		ko.Status.ModifiedAt = nil
	}
	if resp.AccessEntry.PrincipalArn != nil {
		ko.Spec.PrincipalARN = resp.AccessEntry.PrincipalArn
	} else {
		ko.Spec.PrincipalARN = nil
	}
	if resp.AccessEntry.Tags != nil {
		f6 := map[string]*string{}
		for f6key, f6valiter := range resp.AccessEntry.Tags {
			var f6val string
			f6val = *f6valiter
			f6[f6key] = &f6val
		}
		ko.Spec.Tags = f6
	} else {
		ko.Spec.Tags = nil
	}
	if resp.AccessEntry.Type != nil {
		ko.Spec.Type = resp.AccessEntry.Type
	} else {
		ko.Spec.Type = nil
	}
	if resp.AccessEntry.Username != nil {
		ko.Spec.Username = resp.AccessEntry.Username
	} else {
		ko.Spec.Username = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateAccessEntryInput, error) {
	res := &svcsdk.CreateAccessEntryInput{}

	if r.ko.Spec.ClusterName != nil {
		res.SetClusterName(*r.ko.Spec.ClusterName)
	}
	if r.ko.Spec.KubernetesGroups != nil {
		f1 := []*string{}
		for _, f1iter := range r.ko.Spec.KubernetesGroups {
			var f1elem string
			f1elem = *f1iter
			f1 = append(f1, &f1elem)
		}
		res.SetKubernetesGroups(f1)
	}
	if r.ko.Spec.PrincipalARN != nil {
		res.SetPrincipalArn(*r.ko.Spec.PrincipalARN)
	}
	if r.ko.Spec.Tags != nil {
		f3 := map[string]*string{}
		for f3key, f3valiter := range r.ko.Spec.Tags {
			var f3val string
			f3val = *f3valiter
			f3[f3key] = &f3val
		}
		res.SetTags(f3)
	}
	if r.ko.Spec.Type != nil {
		res.SetType(*r.ko.Spec.Type)
	}
	if r.ko.Spec.Username != nil {
		res.SetUsername(*r.ko.Spec.Username)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if delta.DifferentAt("Spec.AccessPolicies") {
		err := rm.syncAccessPolicies(ctx, desired, latest)
		if err != nil {
			return nil, err
		}
	}
	if delta.DifferentAt("Spec.Tags") {
		err := syncTags(
			ctx, rm.sdkapi, rm.metrics,
			string(*latest.ko.Status.ACKResourceMetadata.ARN),
			desired.ko.Spec.Tags, latest.ko.Spec.Tags,
		)
		if err != nil {
			return nil, err
		}
	}
	if !delta.DifferentExcept("Spec.AccessPolicies", "Spec.Tags") {
		return desired, nil
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdateAccessEntryOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateAccessEntryWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateAccessEntry", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.AccessEntry.AccessEntryArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.AccessEntry.AccessEntryArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.AccessEntry.ClusterName != nil {
		ko.Spec.ClusterName = resp.AccessEntry.ClusterName
	} else {
		ko.Spec.ClusterName = nil
	}
	if resp.AccessEntry.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.AccessEntry.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.AccessEntry.KubernetesGroups != nil {
		f3 := []*string{}
		for _, f3iter := range resp.AccessEntry.KubernetesGroups {
			var f3elem string
			f3elem = *f3iter
			f3 = append(f3, &f3elem)
		}
		ko.Spec.KubernetesGroups = f3
	} else {
		ko.Spec.KubernetesGroups = nil
	}
	if resp.AccessEntry.ModifiedAt != nil {
		ko.Status.ModifiedAt = &metav1.Time{*resp.AccessEntry.ModifiedAt}
	} else {
		ko.Status.ModifiedAt = nil
	}
	if resp.AccessEntry.PrincipalArn != nil {
		ko.Spec.PrincipalARN = resp.AccessEntry.PrincipalArn
	} else {
		ko.Spec.PrincipalARN = nil
	}
	if resp.AccessEntry.Tags != nil {
		f6 := map[string]*string{}
		for f6key, f6valiter := range resp.AccessEntry.Tags {
			var f6val string
			f6val = *f6valiter
			f6[f6key] = &f6val
		}
		ko.Spec.Tags = f6
	} else {
		ko.Spec.Tags = nil
	}
	if resp.AccessEntry.Type != nil {
		ko.Spec.Type = resp.AccessEntry.Type
	} else {
		ko.Spec.Type = nil
	}
	if resp.AccessEntry.Username != nil {
		ko.Spec.Username = resp.AccessEntry.Username
	} else {
		ko.Spec.Username = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateAccessEntryInput, error) {
	res := &svcsdk.UpdateAccessEntryInput{}

	if r.ko.Spec.ClusterName != nil {
		res.SetClusterName(*r.ko.Spec.ClusterName)
	}
	if r.ko.Spec.KubernetesGroups != nil {
		f2 := []*string{}
		for _, f2iter := range r.ko.Spec.KubernetesGroups {
			var f2elem string
			f2elem = *f2iter
			f2 = append(f2, &f2elem)
		}
		res.SetKubernetesGroups(f2)
	}
	if r.ko.Spec.PrincipalARN != nil {
		res.SetPrincipalArn(*r.ko.Spec.PrincipalARN)
	}
	if r.ko.Spec.Username != nil {
		res.SetUsername(*r.ko.Spec.Username)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteAccessEntryOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteAccessEntryWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteAccessEntry", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteAccessEntryInput, error) {
	res := &svcsdk.DeleteAccessEntryInput{}

	if r.ko.Spec.ClusterName != nil {
		res.SetClusterName(*r.ko.Spec.ClusterName)
	}
	if r.ko.Spec.PrincipalARN != nil {
		res.SetPrincipalArn(*r.ko.Spec.PrincipalARN)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.AccessEntry,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
