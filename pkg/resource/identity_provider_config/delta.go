// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package identity_provider_config

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.ClusterName, b.ko.Spec.ClusterName) {
		delta.Add("Spec.ClusterName", a.ko.Spec.ClusterName, b.ko.Spec.ClusterName)
	} else if a.ko.Spec.ClusterName != nil && b.ko.Spec.ClusterName != nil {
		if *a.ko.Spec.ClusterName != *b.ko.Spec.ClusterName {
			delta.Add("Spec.ClusterName", a.ko.Spec.ClusterName, b.ko.Spec.ClusterName)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.ClusterRef, b.ko.Spec.ClusterRef) {
		delta.Add("Spec.ClusterRef", a.ko.Spec.ClusterRef, b.ko.Spec.ClusterRef)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.OIDC, b.ko.Spec.OIDC) {
		delta.Add("Spec.OIDC", a.ko.Spec.OIDC, b.ko.Spec.OIDC)
	} else if a.ko.Spec.OIDC != nil && b.ko.Spec.OIDC != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.OIDC.ClientID, b.ko.Spec.OIDC.ClientID) {
			delta.Add("Spec.OIDC.ClientID", a.ko.Spec.OIDC.ClientID, b.ko.Spec.OIDC.ClientID)
		} else if a.ko.Spec.OIDC.ClientID != nil && b.ko.Spec.OIDC.ClientID != nil {
			if *a.ko.Spec.OIDC.ClientID != *b.ko.Spec.OIDC.ClientID {
				delta.Add("Spec.OIDC.ClientID", a.ko.Spec.OIDC.ClientID, b.ko.Spec.OIDC.ClientID)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.OIDC.GroupsClaim, b.ko.Spec.OIDC.GroupsClaim) {
			delta.Add("Spec.OIDC.GroupsClaim", a.ko.Spec.OIDC.GroupsClaim, b.ko.Spec.OIDC.GroupsClaim)
		} else if a.ko.Spec.OIDC.GroupsClaim != nil && b.ko.Spec.OIDC.GroupsClaim != nil {
			if *a.ko.Spec.OIDC.GroupsClaim != *b.ko.Spec.OIDC.GroupsClaim {
				delta.Add("Spec.OIDC.GroupsClaim", a.ko.Spec.OIDC.GroupsClaim, b.ko.Spec.OIDC.GroupsClaim)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.OIDC.GroupsPrefix, b.ko.Spec.OIDC.GroupsPrefix) {
			delta.Add("Spec.OIDC.GroupsPrefix", a.ko.Spec.OIDC.GroupsPrefix, b.ko.Spec.OIDC.GroupsPrefix)
		} else if a.ko.Spec.OIDC.GroupsPrefix != nil && b.ko.Spec.OIDC.GroupsPrefix != nil {
			if *a.ko.Spec.OIDC.GroupsPrefix != *b.ko.Spec.OIDC.GroupsPrefix {
				delta.Add("Spec.OIDC.GroupsPrefix", a.ko.Spec.OIDC.GroupsPrefix, b.ko.Spec.OIDC.GroupsPrefix)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.OIDC.IdentityProviderConfigName, b.ko.Spec.OIDC.IdentityProviderConfigName) {
			delta.Add("Spec.OIDC.IdentityProviderConfigName", a.ko.Spec.OIDC.IdentityProviderConfigName, b.ko.Spec.OIDC.IdentityProviderConfigName)
		} else if a.ko.Spec.OIDC.IdentityProviderConfigName != nil && b.ko.Spec.OIDC.IdentityProviderConfigName != nil {
			if *a.ko.Spec.OIDC.IdentityProviderConfigName != *b.ko.Spec.OIDC.IdentityProviderConfigName {
				delta.Add("Spec.OIDC.IdentityProviderConfigName", a.ko.Spec.OIDC.IdentityProviderConfigName, b.ko.Spec.OIDC.IdentityProviderConfigName)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.OIDC.IssuerURL, b.ko.Spec.OIDC.IssuerURL) {
			delta.Add("Spec.OIDC.IssuerURL", a.ko.Spec.OIDC.IssuerURL, b.ko.Spec.OIDC.IssuerURL)
		} else if a.ko.Spec.OIDC.IssuerURL != nil && b.ko.Spec.OIDC.IssuerURL != nil {
			if *a.ko.Spec.OIDC.IssuerURL != *b.ko.Spec.OIDC.IssuerURL {
				delta.Add("Spec.OIDC.IssuerURL", a.ko.Spec.OIDC.IssuerURL, b.ko.Spec.OIDC.IssuerURL)
			}
		}
		if len(a.ko.Spec.OIDC.RequiredClaims) != len(b.ko.Spec.OIDC.RequiredClaims) {
			delta.Add("Spec.OIDC.RequiredClaims", a.ko.Spec.OIDC.RequiredClaims, b.ko.Spec.OIDC.RequiredClaims)
		} else if len(a.ko.Spec.OIDC.RequiredClaims) > 0 {
			if !ackcompare.MapStringStringPEqual(a.ko.Spec.OIDC.RequiredClaims, b.ko.Spec.OIDC.RequiredClaims) {
				delta.Add("Spec.OIDC.RequiredClaims", a.ko.Spec.OIDC.RequiredClaims, b.ko.Spec.OIDC.RequiredClaims)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.OIDC.UsernameClaim, b.ko.Spec.OIDC.UsernameClaim) {
			delta.Add("Spec.OIDC.UsernameClaim", a.ko.Spec.OIDC.UsernameClaim, b.ko.Spec.OIDC.UsernameClaim)
		} else if a.ko.Spec.OIDC.UsernameClaim != nil && b.ko.Spec.OIDC.UsernameClaim != nil {
			if *a.ko.Spec.OIDC.UsernameClaim != *b.ko.Spec.OIDC.UsernameClaim {
				delta.Add("Spec.OIDC.UsernameClaim", a.ko.Spec.OIDC.UsernameClaim, b.ko.Spec.OIDC.UsernameClaim)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.OIDC.UsernamePrefix, b.ko.Spec.OIDC.UsernamePrefix) {
			delta.Add("Spec.OIDC.UsernamePrefix", a.ko.Spec.OIDC.UsernamePrefix, b.ko.Spec.OIDC.UsernamePrefix)
		} else if a.ko.Spec.OIDC.UsernamePrefix != nil && b.ko.Spec.OIDC.UsernamePrefix != nil {
			if *a.ko.Spec.OIDC.UsernamePrefix != *b.ko.Spec.OIDC.UsernamePrefix {
				delta.Add("Spec.OIDC.UsernamePrefix", a.ko.Spec.OIDC.UsernamePrefix, b.ko.Spec.OIDC.UsernamePrefix)
			}
		}
	}
	if !ackcompare.MapStringStringEqual(ToACKTags(a.ko.Spec.Tags), ToACKTags(b.ko.Spec.Tags)) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}

	return delta
}
