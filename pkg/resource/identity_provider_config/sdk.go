// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package identity_provider_config

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/eks"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/eks-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EKS{}
	_ = &svcapitypes.IdentityProviderConfig{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}
	identityProviderConfigType := IdentityProviderConfigType
	input.IdentityProviderConfig = &svcsdk.IdentityProviderConfig{
		Name: r.ko.Spec.OIDC.IdentityProviderConfigName,
		Type: &identityProviderConfigType,
	}

	var resp *svcsdk.DescribeIdentityProviderConfigOutput
	resp, err = rm.sdkapi.DescribeIdentityProviderConfigWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeIdentityProviderConfig", err)
	if err != nil {
		if reqErr, ok := ackerr.AWSRequestFailure(err); ok && reqErr.StatusCode() == 404 {
			return nil, ackerr.NotFound
		}
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "ResourceNotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.IdentityProviderConfig.Oidc != nil {
		f0 := &svcapitypes.OIDCIdentityProviderConfigRequest{}
		if resp.IdentityProviderConfig.Oidc.ClientId != nil {
			f0.ClientID = resp.IdentityProviderConfig.Oidc.ClientId
		}
		if resp.IdentityProviderConfig.Oidc.GroupsClaim != nil {
			f0.GroupsClaim = resp.IdentityProviderConfig.Oidc.GroupsClaim
		}
		if resp.IdentityProviderConfig.Oidc.GroupsPrefix != nil {
			f0.GroupsPrefix = resp.IdentityProviderConfig.Oidc.GroupsPrefix
		}
		if resp.IdentityProviderConfig.Oidc.IdentityProviderConfigName != nil {
			f0.IdentityProviderConfigName = resp.IdentityProviderConfig.Oidc.IdentityProviderConfigName
		}
		if resp.IdentityProviderConfig.Oidc.IssuerUrl != nil {
			f0.IssuerURL = resp.IdentityProviderConfig.Oidc.IssuerUrl
		}
		if resp.IdentityProviderConfig.Oidc.RequiredClaims != nil {
			f0f7 := map[string]*string{}
			for f0f7key, f0f7valiter := range resp.IdentityProviderConfig.Oidc.RequiredClaims {
				var f0f7val string
				f0f7val = *f0f7valiter
				f0f7[f0f7key] = &f0f7val
			}
			f0.RequiredClaims = f0f7
		}
		if resp.IdentityProviderConfig.Oidc.UsernameClaim != nil {
			f0.UsernameClaim = resp.IdentityProviderConfig.Oidc.UsernameClaim
		}
		if resp.IdentityProviderConfig.Oidc.UsernamePrefix != nil {
			f0.UsernamePrefix = resp.IdentityProviderConfig.Oidc.UsernamePrefix
		}
		ko.Spec.OIDC = f0
	} else {
		ko.Spec.OIDC = nil
	}

	rm.setStatusDefaults(ko)
	if resp.IdentityProviderConfig.Oidc != nil {
		ko.Spec.Tags = resp.IdentityProviderConfig.Oidc.Tags
	}
	ko.Status.Status = resp.IdentityProviderConfig.Oidc.Status
	if !identityProviderActive(&resource{ko}) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource. No need to return a requeue error here.
		ackcondition.SetSynced(&resource{ko}, corev1.ConditionFalse, nil, nil)
	} else {
		ackcondition.SetSynced(&resource{ko}, corev1.ConditionTrue, nil, nil)
	}

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return rm.customCheckRequiredFieldsMissing(r)
}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeIdentityProviderConfigInput, error) {
	res := &svcsdk.DescribeIdentityProviderConfigInput{}

	if r.ko.Spec.ClusterName != nil {
		res.SetClusterName(*r.ko.Spec.ClusterName)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.AssociateIdentityProviderConfigOutput
	_ = resp
	resp, err = rm.sdkapi.AssociateIdentityProviderConfigWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "AssociateIdentityProviderConfig", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.Tags != nil {
		f0 := map[string]*string{}
		for f0key, f0valiter := range resp.Tags {
			var f0val string
			f0val = *f0valiter
			f0[f0key] = &f0val
		}
		ko.Spec.Tags = f0
	} else {
		ko.Spec.Tags = nil
	}

	rm.setStatusDefaults(ko)
	identityProviderStatus := StatusCreating
	ko.Status.Status = &identityProviderStatus

	// Setting resource synced condition to false will trigger a requeue of
	// the resource. No need to return a requeue error here.
	ackcondition.SetSynced(&resource{ko}, corev1.ConditionFalse, nil, nil)

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.AssociateIdentityProviderConfigInput, error) {
	res := &svcsdk.AssociateIdentityProviderConfigInput{}

	if r.ko.Spec.ClusterName != nil {
		res.SetClusterName(*r.ko.Spec.ClusterName)
	}
	if r.ko.Spec.OIDC != nil {
		f1 := &svcsdk.OidcIdentityProviderConfigRequest{}
		if r.ko.Spec.OIDC.ClientID != nil {
			f1.SetClientId(*r.ko.Spec.OIDC.ClientID)
		}
		if r.ko.Spec.OIDC.GroupsClaim != nil {
			f1.SetGroupsClaim(*r.ko.Spec.OIDC.GroupsClaim)
		}
		if r.ko.Spec.OIDC.GroupsPrefix != nil {
			f1.SetGroupsPrefix(*r.ko.Spec.OIDC.GroupsPrefix)
		}
		if r.ko.Spec.OIDC.IdentityProviderConfigName != nil {
			f1.SetIdentityProviderConfigName(*r.ko.Spec.OIDC.IdentityProviderConfigName)
		}
		if r.ko.Spec.OIDC.IssuerURL != nil {
			f1.SetIssuerUrl(*r.ko.Spec.OIDC.IssuerURL)
		}
		if r.ko.Spec.OIDC.RequiredClaims != nil {
			f1f5 := map[string]*string{}
			for f1f5key, f1f5valiter := range r.ko.Spec.OIDC.RequiredClaims {
				var f1f5val string
				f1f5val = *f1f5valiter
				f1f5[f1f5key] = &f1f5val
			}
			f1.SetRequiredClaims(f1f5)
		}
		if r.ko.Spec.OIDC.UsernameClaim != nil {
			f1.SetUsernameClaim(*r.ko.Spec.OIDC.UsernameClaim)
		}
		if r.ko.Spec.OIDC.UsernamePrefix != nil {
			f1.SetUsernamePrefix(*r.ko.Spec.OIDC.UsernamePrefix)
		}
		res.SetOidc(f1)
	}
	if r.ko.Spec.Tags != nil {
		f2 := map[string]*string{}
		for f2key, f2valiter := range r.ko.Spec.Tags {
			var f2val string
			f2val = *f2valiter
			f2[f2key] = &f2val
		}
		res.SetTags(f2)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {
	return rm.customUpdate(ctx, desired, latest, delta)
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	identityProviderConfigType := IdentityProviderConfigType
	input.IdentityProviderConfig = &svcsdk.IdentityProviderConfig{
		Name: r.ko.Spec.OIDC.IdentityProviderConfigName,
		Type: &identityProviderConfigType,
	}

	var resp *svcsdk.DisassociateIdentityProviderConfigOutput
	_ = resp
	resp, err = rm.sdkapi.DisassociateIdentityProviderConfigWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DisassociateIdentityProviderConfig", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DisassociateIdentityProviderConfigInput, error) {
	res := &svcsdk.DisassociateIdentityProviderConfigInput{}

	if r.ko.Spec.ClusterName != nil {
		res.SetClusterName(*r.ko.Spec.ClusterName)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.IdentityProviderConfig,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}

// getImmutableFieldChanges returns list of immutable fields from the
func (rm *resourceManager) getImmutableFieldChanges(
	delta *ackcompare.Delta,
) []string {
	var fields []string
	if delta.DifferentAt("Spec.ClusterName") {
		fields = append(fields, "ClusterName")
	}
	if delta.DifferentAt("Spec.OIDC") {
		fields = append(fields, "OIDC")
	}
	if delta.DifferentAt("Spec.Tags") {
		fields = append(fields, "Tags")
	}

	return fields
}
