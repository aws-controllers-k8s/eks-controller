// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package cluster

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/eks"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/eks/types"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/eks-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.Cluster{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeClusterOutput
	resp, err = rm.sdkapi.DescribeCluster(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeCluster", err)
	if err != nil {
		if reqErr, ok := ackerr.AWSRequestFailure(err); ok && reqErr.StatusCode() == 404 {
			return nil, ackerr.NotFound
		}
		if strings.Contains(err.Error(), "ResourceNotFoundException") {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.Cluster.AccessConfig != nil {
		f0 := &svcapitypes.CreateAccessConfigRequest{}
		if resp.Cluster.AccessConfig.AuthenticationMode != "" {
			f0.AuthenticationMode = aws.String(string(resp.Cluster.AccessConfig.AuthenticationMode))
		}
		if resp.Cluster.AccessConfig.BootstrapClusterCreatorAdminPermissions != nil {
			f0.BootstrapClusterCreatorAdminPermissions = resp.Cluster.AccessConfig.BootstrapClusterCreatorAdminPermissions
		}
		ko.Spec.AccessConfig = f0
	} else {
		ko.Spec.AccessConfig = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Cluster.Arn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Cluster.Arn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.Cluster.CertificateAuthority != nil {
		f2 := &svcapitypes.Certificate{}
		if resp.Cluster.CertificateAuthority.Data != nil {
			f2.Data = resp.Cluster.CertificateAuthority.Data
		}
		ko.Status.CertificateAuthority = f2
	} else {
		ko.Status.CertificateAuthority = nil
	}
	if resp.Cluster.ClientRequestToken != nil {
		ko.Spec.ClientRequestToken = resp.Cluster.ClientRequestToken
	} else {
		ko.Spec.ClientRequestToken = nil
	}
	if resp.Cluster.ComputeConfig != nil {
		f4 := &svcapitypes.ComputeConfigRequest{}
		if resp.Cluster.ComputeConfig.Enabled != nil {
			f4.Enabled = resp.Cluster.ComputeConfig.Enabled
		}
		if resp.Cluster.ComputeConfig.NodePools != nil {
			f4.NodePools = aws.StringSlice(resp.Cluster.ComputeConfig.NodePools)
		}
		if resp.Cluster.ComputeConfig.NodeRoleArn != nil {
			f4.NodeRoleARN = resp.Cluster.ComputeConfig.NodeRoleArn
		}
		ko.Spec.ComputeConfig = f4
	} else {
		ko.Spec.ComputeConfig = nil
	}
	if resp.Cluster.ConnectorConfig != nil {
		f5 := &svcapitypes.ConnectorConfigResponse{}
		if resp.Cluster.ConnectorConfig.ActivationCode != nil {
			f5.ActivationCode = resp.Cluster.ConnectorConfig.ActivationCode
		}
		if resp.Cluster.ConnectorConfig.ActivationExpiry != nil {
			f5.ActivationExpiry = &metav1.Time{*resp.Cluster.ConnectorConfig.ActivationExpiry}
		}
		if resp.Cluster.ConnectorConfig.ActivationId != nil {
			f5.ActivationID = resp.Cluster.ConnectorConfig.ActivationId
		}
		if resp.Cluster.ConnectorConfig.Provider != nil {
			f5.Provider = resp.Cluster.ConnectorConfig.Provider
		}
		if resp.Cluster.ConnectorConfig.RoleArn != nil {
			f5.RoleARN = resp.Cluster.ConnectorConfig.RoleArn
		}
		ko.Status.ConnectorConfig = f5
	} else {
		ko.Status.ConnectorConfig = nil
	}
	if resp.Cluster.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.Cluster.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.Cluster.EncryptionConfig != nil {
		f7 := []*svcapitypes.EncryptionConfig{}
		for _, f7iter := range resp.Cluster.EncryptionConfig {
			f7elem := &svcapitypes.EncryptionConfig{}
			if f7iter.Provider != nil {
				f7elemf0 := &svcapitypes.Provider{}
				if f7iter.Provider.KeyArn != nil {
					f7elemf0.KeyARN = f7iter.Provider.KeyArn
				}
				f7elem.Provider = f7elemf0
			}
			if f7iter.Resources != nil {
				f7elem.Resources = aws.StringSlice(f7iter.Resources)
			}
			f7 = append(f7, f7elem)
		}
		ko.Spec.EncryptionConfig = f7
	} else {
		ko.Spec.EncryptionConfig = nil
	}
	if resp.Cluster.Endpoint != nil {
		ko.Status.Endpoint = resp.Cluster.Endpoint
	} else {
		ko.Status.Endpoint = nil
	}
	if resp.Cluster.Health != nil {
		f9 := &svcapitypes.ClusterHealth{}
		if resp.Cluster.Health.Issues != nil {
			f9f0 := []*svcapitypes.ClusterIssue{}
			for _, f9f0iter := range resp.Cluster.Health.Issues {
				f9f0elem := &svcapitypes.ClusterIssue{}
				if f9f0iter.Code != "" {
					f9f0elem.Code = aws.String(string(f9f0iter.Code))
				}
				if f9f0iter.Message != nil {
					f9f0elem.Message = f9f0iter.Message
				}
				if f9f0iter.ResourceIds != nil {
					f9f0elem.ResourceIDs = aws.StringSlice(f9f0iter.ResourceIds)
				}
				f9f0 = append(f9f0, f9f0elem)
			}
			f9.Issues = f9f0
		}
		ko.Status.Health = f9
	} else {
		ko.Status.Health = nil
	}
	if resp.Cluster.Id != nil {
		ko.Status.ID = resp.Cluster.Id
	} else {
		ko.Status.ID = nil
	}
	if resp.Cluster.Identity != nil {
		f11 := &svcapitypes.Identity{}
		if resp.Cluster.Identity.Oidc != nil {
			f11f0 := &svcapitypes.OIDC{}
			if resp.Cluster.Identity.Oidc.Issuer != nil {
				f11f0.Issuer = resp.Cluster.Identity.Oidc.Issuer
			}
			f11.OIDC = f11f0
		}
		ko.Status.Identity = f11
	} else {
		ko.Status.Identity = nil
	}
	if resp.Cluster.KubernetesNetworkConfig != nil {
		f12 := &svcapitypes.KubernetesNetworkConfigRequest{}
		if resp.Cluster.KubernetesNetworkConfig.ElasticLoadBalancing != nil {
			f12f0 := &svcapitypes.ElasticLoadBalancing{}
			if resp.Cluster.KubernetesNetworkConfig.ElasticLoadBalancing.Enabled != nil {
				f12f0.Enabled = resp.Cluster.KubernetesNetworkConfig.ElasticLoadBalancing.Enabled
			}
			f12.ElasticLoadBalancing = f12f0
		}
		if resp.Cluster.KubernetesNetworkConfig.IpFamily != "" {
			f12.IPFamily = aws.String(string(resp.Cluster.KubernetesNetworkConfig.IpFamily))
		}
		if resp.Cluster.KubernetesNetworkConfig.ServiceIpv4Cidr != nil {
			f12.ServiceIPv4CIDR = resp.Cluster.KubernetesNetworkConfig.ServiceIpv4Cidr
		}
		ko.Spec.KubernetesNetworkConfig = f12
	} else {
		ko.Spec.KubernetesNetworkConfig = nil
	}
	if resp.Cluster.Logging != nil {
		f13 := &svcapitypes.Logging{}
		if resp.Cluster.Logging.ClusterLogging != nil {
			f13f0 := []*svcapitypes.LogSetup{}
			for _, f13f0iter := range resp.Cluster.Logging.ClusterLogging {
				f13f0elem := &svcapitypes.LogSetup{}
				if f13f0iter.Enabled != nil {
					f13f0elem.Enabled = f13f0iter.Enabled
				}
				if f13f0iter.Types != nil {
					f13f0elemf1 := []*string{}
					for _, f13f0elemf1iter := range f13f0iter.Types {
						var f13f0elemf1elem *string
						f13f0elemf1elem = aws.String(string(f13f0elemf1iter))
						f13f0elemf1 = append(f13f0elemf1, f13f0elemf1elem)
					}
					f13f0elem.Types = f13f0elemf1
				}
				f13f0 = append(f13f0, f13f0elem)
			}
			f13.ClusterLogging = f13f0
		}
		ko.Spec.Logging = f13
	} else {
		ko.Spec.Logging = nil
	}
	if resp.Cluster.Name != nil {
		ko.Spec.Name = resp.Cluster.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.Cluster.OutpostConfig != nil {
		f15 := &svcapitypes.OutpostConfigRequest{}
		if resp.Cluster.OutpostConfig.ControlPlaneInstanceType != nil {
			f15.ControlPlaneInstanceType = resp.Cluster.OutpostConfig.ControlPlaneInstanceType
		}
		if resp.Cluster.OutpostConfig.ControlPlanePlacement != nil {
			f15f1 := &svcapitypes.ControlPlanePlacementRequest{}
			if resp.Cluster.OutpostConfig.ControlPlanePlacement.GroupName != nil {
				f15f1.GroupName = resp.Cluster.OutpostConfig.ControlPlanePlacement.GroupName
			}
			f15.ControlPlanePlacement = f15f1
		}
		if resp.Cluster.OutpostConfig.OutpostArns != nil {
			f15.OutpostARNs = aws.StringSlice(resp.Cluster.OutpostConfig.OutpostArns)
		}
		ko.Spec.OutpostConfig = f15
	} else {
		ko.Spec.OutpostConfig = nil
	}
	if resp.Cluster.PlatformVersion != nil {
		ko.Status.PlatformVersion = resp.Cluster.PlatformVersion
	} else {
		ko.Status.PlatformVersion = nil
	}
	if resp.Cluster.RemoteNetworkConfig != nil {
		f17 := &svcapitypes.RemoteNetworkConfigRequest{}
		if resp.Cluster.RemoteNetworkConfig.RemoteNodeNetworks != nil {
			f17f0 := []*svcapitypes.RemoteNodeNetwork{}
			for _, f17f0iter := range resp.Cluster.RemoteNetworkConfig.RemoteNodeNetworks {
				f17f0elem := &svcapitypes.RemoteNodeNetwork{}
				if f17f0iter.Cidrs != nil {
					f17f0elem.CIDRs = aws.StringSlice(f17f0iter.Cidrs)
				}
				f17f0 = append(f17f0, f17f0elem)
			}
			f17.RemoteNodeNetworks = f17f0
		}
		if resp.Cluster.RemoteNetworkConfig.RemotePodNetworks != nil {
			f17f1 := []*svcapitypes.RemotePodNetwork{}
			for _, f17f1iter := range resp.Cluster.RemoteNetworkConfig.RemotePodNetworks {
				f17f1elem := &svcapitypes.RemotePodNetwork{}
				if f17f1iter.Cidrs != nil {
					f17f1elem.CIDRs = aws.StringSlice(f17f1iter.Cidrs)
				}
				f17f1 = append(f17f1, f17f1elem)
			}
			f17.RemotePodNetworks = f17f1
		}
		ko.Spec.RemoteNetworkConfig = f17
	} else {
		ko.Spec.RemoteNetworkConfig = nil
	}
	if resp.Cluster.ResourcesVpcConfig != nil {
		f18 := &svcapitypes.VPCConfigRequest{}
		f18.EndpointPrivateAccess = &resp.Cluster.ResourcesVpcConfig.EndpointPrivateAccess
		f18.EndpointPublicAccess = &resp.Cluster.ResourcesVpcConfig.EndpointPublicAccess
		if resp.Cluster.ResourcesVpcConfig.PublicAccessCidrs != nil {
			f18.PublicAccessCIDRs = aws.StringSlice(resp.Cluster.ResourcesVpcConfig.PublicAccessCidrs)
		}
		if resp.Cluster.ResourcesVpcConfig.SecurityGroupIds != nil {
			f18.SecurityGroupIDs = aws.StringSlice(resp.Cluster.ResourcesVpcConfig.SecurityGroupIds)
		}
		if resp.Cluster.ResourcesVpcConfig.SubnetIds != nil {
			f18.SubnetIDs = aws.StringSlice(resp.Cluster.ResourcesVpcConfig.SubnetIds)
		}
		ko.Spec.ResourcesVPCConfig = f18
	} else {
		ko.Spec.ResourcesVPCConfig = nil
	}
	if resp.Cluster.RoleArn != nil {
		ko.Spec.RoleARN = resp.Cluster.RoleArn
	} else {
		ko.Spec.RoleARN = nil
	}
	if resp.Cluster.Status != "" {
		ko.Status.Status = aws.String(string(resp.Cluster.Status))
	} else {
		ko.Status.Status = nil
	}
	if resp.Cluster.StorageConfig != nil {
		f21 := &svcapitypes.StorageConfigRequest{}
		if resp.Cluster.StorageConfig.BlockStorage != nil {
			f21f0 := &svcapitypes.BlockStorage{}
			if resp.Cluster.StorageConfig.BlockStorage.Enabled != nil {
				f21f0.Enabled = resp.Cluster.StorageConfig.BlockStorage.Enabled
			}
			f21.BlockStorage = f21f0
		}
		ko.Spec.StorageConfig = f21
	} else {
		ko.Spec.StorageConfig = nil
	}
	if resp.Cluster.Tags != nil {
		ko.Spec.Tags = aws.StringMap(resp.Cluster.Tags)
	} else {
		ko.Spec.Tags = nil
	}
	if resp.Cluster.UpgradePolicy != nil {
		f23 := &svcapitypes.UpgradePolicyRequest{}
		if resp.Cluster.UpgradePolicy.SupportType != "" {
			f23.SupportType = aws.String(string(resp.Cluster.UpgradePolicy.SupportType))
		}
		ko.Spec.UpgradePolicy = f23
	} else {
		ko.Spec.UpgradePolicy = nil
	}
	if resp.Cluster.Version != nil {
		ko.Spec.Version = resp.Cluster.Version
	} else {
		ko.Spec.Version = nil
	}
	if resp.Cluster.ZonalShiftConfig != nil {
		f25 := &svcapitypes.ZonalShiftConfigRequest{}
		if resp.Cluster.ZonalShiftConfig.Enabled != nil {
			f25.Enabled = resp.Cluster.ZonalShiftConfig.Enabled
		}
		ko.Spec.ZonalShiftConfig = f25
	} else {
		ko.Spec.ZonalShiftConfig = nil
	}

	rm.setStatusDefaults(ko)
	if r.ko.Spec.ResourcesVPCConfig != nil && r.ko.Spec.ResourcesVPCConfig.SubnetRefs != nil {
		ko.Spec.ResourcesVPCConfig.SubnetRefs = r.ko.Spec.ResourcesVPCConfig.SubnetRefs
	}

	if r.ko.Spec.ResourcesVPCConfig != nil && r.ko.Spec.ResourcesVPCConfig.SecurityGroupRefs != nil {
		ko.Spec.ResourcesVPCConfig.SecurityGroupRefs = r.ko.Spec.ResourcesVPCConfig.SecurityGroupRefs
	}

	if !clusterActive(&resource{ko}) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource. No need to return a requeue error here.
		ackcondition.SetSynced(&resource{ko}, corev1.ConditionFalse, nil, nil)
	} else {
		ackcondition.SetSynced(&resource{ko}, corev1.ConditionTrue, nil, nil)
	}
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.Name == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeClusterInput, error) {
	res := &svcsdk.DescribeClusterInput{}

	if r.ko.Spec.Name != nil {
		res.Name = r.ko.Spec.Name
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateClusterOutput
	_ = resp
	resp, err = rm.sdkapi.CreateCluster(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateCluster", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.Cluster.AccessConfig != nil {
		f0 := &svcapitypes.CreateAccessConfigRequest{}
		if resp.Cluster.AccessConfig.AuthenticationMode != "" {
			f0.AuthenticationMode = aws.String(string(resp.Cluster.AccessConfig.AuthenticationMode))
		}
		if resp.Cluster.AccessConfig.BootstrapClusterCreatorAdminPermissions != nil {
			f0.BootstrapClusterCreatorAdminPermissions = resp.Cluster.AccessConfig.BootstrapClusterCreatorAdminPermissions
		}
		ko.Spec.AccessConfig = f0
	} else {
		ko.Spec.AccessConfig = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Cluster.Arn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Cluster.Arn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.Cluster.CertificateAuthority != nil {
		f2 := &svcapitypes.Certificate{}
		if resp.Cluster.CertificateAuthority.Data != nil {
			f2.Data = resp.Cluster.CertificateAuthority.Data
		}
		ko.Status.CertificateAuthority = f2
	} else {
		ko.Status.CertificateAuthority = nil
	}
	if resp.Cluster.ClientRequestToken != nil {
		ko.Spec.ClientRequestToken = resp.Cluster.ClientRequestToken
	} else {
		ko.Spec.ClientRequestToken = nil
	}
	if resp.Cluster.ComputeConfig != nil {
		f4 := &svcapitypes.ComputeConfigRequest{}
		if resp.Cluster.ComputeConfig.Enabled != nil {
			f4.Enabled = resp.Cluster.ComputeConfig.Enabled
		}
		if resp.Cluster.ComputeConfig.NodePools != nil {
			f4.NodePools = aws.StringSlice(resp.Cluster.ComputeConfig.NodePools)
		}
		if resp.Cluster.ComputeConfig.NodeRoleArn != nil {
			f4.NodeRoleARN = resp.Cluster.ComputeConfig.NodeRoleArn
		}
		ko.Spec.ComputeConfig = f4
	} else {
		ko.Spec.ComputeConfig = nil
	}
	if resp.Cluster.ConnectorConfig != nil {
		f5 := &svcapitypes.ConnectorConfigResponse{}
		if resp.Cluster.ConnectorConfig.ActivationCode != nil {
			f5.ActivationCode = resp.Cluster.ConnectorConfig.ActivationCode
		}
		if resp.Cluster.ConnectorConfig.ActivationExpiry != nil {
			f5.ActivationExpiry = &metav1.Time{*resp.Cluster.ConnectorConfig.ActivationExpiry}
		}
		if resp.Cluster.ConnectorConfig.ActivationId != nil {
			f5.ActivationID = resp.Cluster.ConnectorConfig.ActivationId
		}
		if resp.Cluster.ConnectorConfig.Provider != nil {
			f5.Provider = resp.Cluster.ConnectorConfig.Provider
		}
		if resp.Cluster.ConnectorConfig.RoleArn != nil {
			f5.RoleARN = resp.Cluster.ConnectorConfig.RoleArn
		}
		ko.Status.ConnectorConfig = f5
	} else {
		ko.Status.ConnectorConfig = nil
	}
	if resp.Cluster.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.Cluster.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.Cluster.EncryptionConfig != nil {
		f7 := []*svcapitypes.EncryptionConfig{}
		for _, f7iter := range resp.Cluster.EncryptionConfig {
			f7elem := &svcapitypes.EncryptionConfig{}
			if f7iter.Provider != nil {
				f7elemf0 := &svcapitypes.Provider{}
				if f7iter.Provider.KeyArn != nil {
					f7elemf0.KeyARN = f7iter.Provider.KeyArn
				}
				f7elem.Provider = f7elemf0
			}
			if f7iter.Resources != nil {
				f7elem.Resources = aws.StringSlice(f7iter.Resources)
			}
			f7 = append(f7, f7elem)
		}
		ko.Spec.EncryptionConfig = f7
	} else {
		ko.Spec.EncryptionConfig = nil
	}
	if resp.Cluster.Endpoint != nil {
		ko.Status.Endpoint = resp.Cluster.Endpoint
	} else {
		ko.Status.Endpoint = nil
	}
	if resp.Cluster.Health != nil {
		f9 := &svcapitypes.ClusterHealth{}
		if resp.Cluster.Health.Issues != nil {
			f9f0 := []*svcapitypes.ClusterIssue{}
			for _, f9f0iter := range resp.Cluster.Health.Issues {
				f9f0elem := &svcapitypes.ClusterIssue{}
				if f9f0iter.Code != "" {
					f9f0elem.Code = aws.String(string(f9f0iter.Code))
				}
				if f9f0iter.Message != nil {
					f9f0elem.Message = f9f0iter.Message
				}
				if f9f0iter.ResourceIds != nil {
					f9f0elem.ResourceIDs = aws.StringSlice(f9f0iter.ResourceIds)
				}
				f9f0 = append(f9f0, f9f0elem)
			}
			f9.Issues = f9f0
		}
		ko.Status.Health = f9
	} else {
		ko.Status.Health = nil
	}
	if resp.Cluster.Id != nil {
		ko.Status.ID = resp.Cluster.Id
	} else {
		ko.Status.ID = nil
	}
	if resp.Cluster.Identity != nil {
		f11 := &svcapitypes.Identity{}
		if resp.Cluster.Identity.Oidc != nil {
			f11f0 := &svcapitypes.OIDC{}
			if resp.Cluster.Identity.Oidc.Issuer != nil {
				f11f0.Issuer = resp.Cluster.Identity.Oidc.Issuer
			}
			f11.OIDC = f11f0
		}
		ko.Status.Identity = f11
	} else {
		ko.Status.Identity = nil
	}
	if resp.Cluster.KubernetesNetworkConfig != nil {
		f12 := &svcapitypes.KubernetesNetworkConfigRequest{}
		if resp.Cluster.KubernetesNetworkConfig.ElasticLoadBalancing != nil {
			f12f0 := &svcapitypes.ElasticLoadBalancing{}
			if resp.Cluster.KubernetesNetworkConfig.ElasticLoadBalancing.Enabled != nil {
				f12f0.Enabled = resp.Cluster.KubernetesNetworkConfig.ElasticLoadBalancing.Enabled
			}
			f12.ElasticLoadBalancing = f12f0
		}
		if resp.Cluster.KubernetesNetworkConfig.IpFamily != "" {
			f12.IPFamily = aws.String(string(resp.Cluster.KubernetesNetworkConfig.IpFamily))
		}
		if resp.Cluster.KubernetesNetworkConfig.ServiceIpv4Cidr != nil {
			f12.ServiceIPv4CIDR = resp.Cluster.KubernetesNetworkConfig.ServiceIpv4Cidr
		}
		ko.Spec.KubernetesNetworkConfig = f12
	} else {
		ko.Spec.KubernetesNetworkConfig = nil
	}
	if resp.Cluster.Logging != nil {
		f13 := &svcapitypes.Logging{}
		if resp.Cluster.Logging.ClusterLogging != nil {
			f13f0 := []*svcapitypes.LogSetup{}
			for _, f13f0iter := range resp.Cluster.Logging.ClusterLogging {
				f13f0elem := &svcapitypes.LogSetup{}
				if f13f0iter.Enabled != nil {
					f13f0elem.Enabled = f13f0iter.Enabled
				}
				if f13f0iter.Types != nil {
					f13f0elemf1 := []*string{}
					for _, f13f0elemf1iter := range f13f0iter.Types {
						var f13f0elemf1elem *string
						f13f0elemf1elem = aws.String(string(f13f0elemf1iter))
						f13f0elemf1 = append(f13f0elemf1, f13f0elemf1elem)
					}
					f13f0elem.Types = f13f0elemf1
				}
				f13f0 = append(f13f0, f13f0elem)
			}
			f13.ClusterLogging = f13f0
		}
		ko.Spec.Logging = f13
	} else {
		ko.Spec.Logging = nil
	}
	if resp.Cluster.Name != nil {
		ko.Spec.Name = resp.Cluster.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.Cluster.OutpostConfig != nil {
		f15 := &svcapitypes.OutpostConfigRequest{}
		if resp.Cluster.OutpostConfig.ControlPlaneInstanceType != nil {
			f15.ControlPlaneInstanceType = resp.Cluster.OutpostConfig.ControlPlaneInstanceType
		}
		if resp.Cluster.OutpostConfig.ControlPlanePlacement != nil {
			f15f1 := &svcapitypes.ControlPlanePlacementRequest{}
			if resp.Cluster.OutpostConfig.ControlPlanePlacement.GroupName != nil {
				f15f1.GroupName = resp.Cluster.OutpostConfig.ControlPlanePlacement.GroupName
			}
			f15.ControlPlanePlacement = f15f1
		}
		if resp.Cluster.OutpostConfig.OutpostArns != nil {
			f15.OutpostARNs = aws.StringSlice(resp.Cluster.OutpostConfig.OutpostArns)
		}
		ko.Spec.OutpostConfig = f15
	} else {
		ko.Spec.OutpostConfig = nil
	}
	if resp.Cluster.PlatformVersion != nil {
		ko.Status.PlatformVersion = resp.Cluster.PlatformVersion
	} else {
		ko.Status.PlatformVersion = nil
	}
	if resp.Cluster.RemoteNetworkConfig != nil {
		f17 := &svcapitypes.RemoteNetworkConfigRequest{}
		if resp.Cluster.RemoteNetworkConfig.RemoteNodeNetworks != nil {
			f17f0 := []*svcapitypes.RemoteNodeNetwork{}
			for _, f17f0iter := range resp.Cluster.RemoteNetworkConfig.RemoteNodeNetworks {
				f17f0elem := &svcapitypes.RemoteNodeNetwork{}
				if f17f0iter.Cidrs != nil {
					f17f0elem.CIDRs = aws.StringSlice(f17f0iter.Cidrs)
				}
				f17f0 = append(f17f0, f17f0elem)
			}
			f17.RemoteNodeNetworks = f17f0
		}
		if resp.Cluster.RemoteNetworkConfig.RemotePodNetworks != nil {
			f17f1 := []*svcapitypes.RemotePodNetwork{}
			for _, f17f1iter := range resp.Cluster.RemoteNetworkConfig.RemotePodNetworks {
				f17f1elem := &svcapitypes.RemotePodNetwork{}
				if f17f1iter.Cidrs != nil {
					f17f1elem.CIDRs = aws.StringSlice(f17f1iter.Cidrs)
				}
				f17f1 = append(f17f1, f17f1elem)
			}
			f17.RemotePodNetworks = f17f1
		}
		ko.Spec.RemoteNetworkConfig = f17
	} else {
		ko.Spec.RemoteNetworkConfig = nil
	}
	if resp.Cluster.ResourcesVpcConfig != nil {
		f18 := &svcapitypes.VPCConfigRequest{}
		f18.EndpointPrivateAccess = &resp.Cluster.ResourcesVpcConfig.EndpointPrivateAccess
		f18.EndpointPublicAccess = &resp.Cluster.ResourcesVpcConfig.EndpointPublicAccess
		if resp.Cluster.ResourcesVpcConfig.PublicAccessCidrs != nil {
			f18.PublicAccessCIDRs = aws.StringSlice(resp.Cluster.ResourcesVpcConfig.PublicAccessCidrs)
		}
		if resp.Cluster.ResourcesVpcConfig.SecurityGroupIds != nil {
			f18.SecurityGroupIDs = aws.StringSlice(resp.Cluster.ResourcesVpcConfig.SecurityGroupIds)
		}
		if resp.Cluster.ResourcesVpcConfig.SubnetIds != nil {
			f18.SubnetIDs = aws.StringSlice(resp.Cluster.ResourcesVpcConfig.SubnetIds)
		}
		ko.Spec.ResourcesVPCConfig = f18
	} else {
		ko.Spec.ResourcesVPCConfig = nil
	}
	if resp.Cluster.RoleArn != nil {
		ko.Spec.RoleARN = resp.Cluster.RoleArn
	} else {
		ko.Spec.RoleARN = nil
	}
	if resp.Cluster.Status != "" {
		ko.Status.Status = aws.String(string(resp.Cluster.Status))
	} else {
		ko.Status.Status = nil
	}
	if resp.Cluster.StorageConfig != nil {
		f21 := &svcapitypes.StorageConfigRequest{}
		if resp.Cluster.StorageConfig.BlockStorage != nil {
			f21f0 := &svcapitypes.BlockStorage{}
			if resp.Cluster.StorageConfig.BlockStorage.Enabled != nil {
				f21f0.Enabled = resp.Cluster.StorageConfig.BlockStorage.Enabled
			}
			f21.BlockStorage = f21f0
		}
		ko.Spec.StorageConfig = f21
	} else {
		ko.Spec.StorageConfig = nil
	}
	if resp.Cluster.Tags != nil {
		ko.Spec.Tags = aws.StringMap(resp.Cluster.Tags)
	} else {
		ko.Spec.Tags = nil
	}
	if resp.Cluster.UpgradePolicy != nil {
		f23 := &svcapitypes.UpgradePolicyRequest{}
		if resp.Cluster.UpgradePolicy.SupportType != "" {
			f23.SupportType = aws.String(string(resp.Cluster.UpgradePolicy.SupportType))
		}
		ko.Spec.UpgradePolicy = f23
	} else {
		ko.Spec.UpgradePolicy = nil
	}
	if resp.Cluster.Version != nil {
		ko.Spec.Version = resp.Cluster.Version
	} else {
		ko.Spec.Version = nil
	}
	if resp.Cluster.ZonalShiftConfig != nil {
		f25 := &svcapitypes.ZonalShiftConfigRequest{}
		if resp.Cluster.ZonalShiftConfig.Enabled != nil {
			f25.Enabled = resp.Cluster.ZonalShiftConfig.Enabled
		}
		ko.Spec.ZonalShiftConfig = f25
	} else {
		ko.Spec.ZonalShiftConfig = nil
	}

	rm.setStatusDefaults(ko)
	if desired.ko.Spec.ResourcesVPCConfig.SubnetRefs != nil {
		ko.Spec.ResourcesVPCConfig.SubnetRefs = desired.ko.Spec.ResourcesVPCConfig.SubnetRefs
	}

	if desired.ko.Spec.ResourcesVPCConfig.SecurityGroupRefs != nil {
		ko.Spec.ResourcesVPCConfig.SecurityGroupRefs = desired.ko.Spec.ResourcesVPCConfig.SecurityGroupRefs
	}

	// We expect the cluster to be in 'CREATING' status since we just issued
	// the call to create it, but I suppose it doesn't hurt to check here.
	if clusterCreating(&resource{ko}) {
		// Setting resource synced condition to false will trigger a requeue of
		// the resource. No need to return a requeue error here.
		ackcondition.SetSynced(&resource{ko}, corev1.ConditionFalse, nil, nil)
		return &resource{ko}, nil
	}

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateClusterInput, error) {
	res := &svcsdk.CreateClusterInput{}

	if r.ko.Spec.AccessConfig != nil {
		f0 := &svcsdktypes.CreateAccessConfigRequest{}
		if r.ko.Spec.AccessConfig.AuthenticationMode != nil {
			f0.AuthenticationMode = svcsdktypes.AuthenticationMode(*r.ko.Spec.AccessConfig.AuthenticationMode)
		}
		if r.ko.Spec.AccessConfig.BootstrapClusterCreatorAdminPermissions != nil {
			f0.BootstrapClusterCreatorAdminPermissions = r.ko.Spec.AccessConfig.BootstrapClusterCreatorAdminPermissions
		}
		res.AccessConfig = f0
	}
	if r.ko.Spec.BootstrapSelfManagedAddons != nil {
		res.BootstrapSelfManagedAddons = r.ko.Spec.BootstrapSelfManagedAddons
	}
	if r.ko.Spec.ClientRequestToken != nil {
		res.ClientRequestToken = r.ko.Spec.ClientRequestToken
	}
	if r.ko.Spec.ComputeConfig != nil {
		f3 := &svcsdktypes.ComputeConfigRequest{}
		if r.ko.Spec.ComputeConfig.Enabled != nil {
			f3.Enabled = r.ko.Spec.ComputeConfig.Enabled
		}
		if r.ko.Spec.ComputeConfig.NodePools != nil {
			f3.NodePools = aws.ToStringSlice(r.ko.Spec.ComputeConfig.NodePools)
		}
		if r.ko.Spec.ComputeConfig.NodeRoleARN != nil {
			f3.NodeRoleArn = r.ko.Spec.ComputeConfig.NodeRoleARN
		}
		res.ComputeConfig = f3
	}
	if r.ko.Spec.EncryptionConfig != nil {
		f4 := []svcsdktypes.EncryptionConfig{}
		for _, f4iter := range r.ko.Spec.EncryptionConfig {
			f4elem := &svcsdktypes.EncryptionConfig{}
			if f4iter.Provider != nil {
				f4elemf0 := &svcsdktypes.Provider{}
				if f4iter.Provider.KeyARN != nil {
					f4elemf0.KeyArn = f4iter.Provider.KeyARN
				}
				f4elem.Provider = f4elemf0
			}
			if f4iter.Resources != nil {
				f4elem.Resources = aws.ToStringSlice(f4iter.Resources)
			}
			f4 = append(f4, *f4elem)
		}
		res.EncryptionConfig = f4
	}
	if r.ko.Spec.KubernetesNetworkConfig != nil {
		f5 := &svcsdktypes.KubernetesNetworkConfigRequest{}
		if r.ko.Spec.KubernetesNetworkConfig.ElasticLoadBalancing != nil {
			f5f0 := &svcsdktypes.ElasticLoadBalancing{}
			if r.ko.Spec.KubernetesNetworkConfig.ElasticLoadBalancing.Enabled != nil {
				f5f0.Enabled = r.ko.Spec.KubernetesNetworkConfig.ElasticLoadBalancing.Enabled
			}
			f5.ElasticLoadBalancing = f5f0
		}
		if r.ko.Spec.KubernetesNetworkConfig.IPFamily != nil {
			f5.IpFamily = svcsdktypes.IpFamily(*r.ko.Spec.KubernetesNetworkConfig.IPFamily)
		}
		if r.ko.Spec.KubernetesNetworkConfig.ServiceIPv4CIDR != nil {
			f5.ServiceIpv4Cidr = r.ko.Spec.KubernetesNetworkConfig.ServiceIPv4CIDR
		}
		res.KubernetesNetworkConfig = f5
	}
	if r.ko.Spec.Logging != nil {
		f6 := &svcsdktypes.Logging{}
		if r.ko.Spec.Logging.ClusterLogging != nil {
			f6f0 := []svcsdktypes.LogSetup{}
			for _, f6f0iter := range r.ko.Spec.Logging.ClusterLogging {
				f6f0elem := &svcsdktypes.LogSetup{}
				if f6f0iter.Enabled != nil {
					f6f0elem.Enabled = f6f0iter.Enabled
				}
				if f6f0iter.Types != nil {
					f6f0elemf1 := []svcsdktypes.LogType{}
					for _, f6f0elemf1iter := range f6f0iter.Types {
						var f6f0elemf1elem string
						f6f0elemf1elem = string(*f6f0elemf1iter)
						f6f0elemf1 = append(f6f0elemf1, svcsdktypes.LogType(f6f0elemf1elem))
					}
					f6f0elem.Types = f6f0elemf1
				}
				f6f0 = append(f6f0, *f6f0elem)
			}
			f6.ClusterLogging = f6f0
		}
		res.Logging = f6
	}
	if r.ko.Spec.Name != nil {
		res.Name = r.ko.Spec.Name
	}
	if r.ko.Spec.OutpostConfig != nil {
		f8 := &svcsdktypes.OutpostConfigRequest{}
		if r.ko.Spec.OutpostConfig.ControlPlaneInstanceType != nil {
			f8.ControlPlaneInstanceType = r.ko.Spec.OutpostConfig.ControlPlaneInstanceType
		}
		if r.ko.Spec.OutpostConfig.ControlPlanePlacement != nil {
			f8f1 := &svcsdktypes.ControlPlanePlacementRequest{}
			if r.ko.Spec.OutpostConfig.ControlPlanePlacement.GroupName != nil {
				f8f1.GroupName = r.ko.Spec.OutpostConfig.ControlPlanePlacement.GroupName
			}
			f8.ControlPlanePlacement = f8f1
		}
		if r.ko.Spec.OutpostConfig.OutpostARNs != nil {
			f8.OutpostArns = aws.ToStringSlice(r.ko.Spec.OutpostConfig.OutpostARNs)
		}
		res.OutpostConfig = f8
	}
	if r.ko.Spec.RemoteNetworkConfig != nil {
		f9 := &svcsdktypes.RemoteNetworkConfigRequest{}
		if r.ko.Spec.RemoteNetworkConfig.RemoteNodeNetworks != nil {
			f9f0 := []svcsdktypes.RemoteNodeNetwork{}
			for _, f9f0iter := range r.ko.Spec.RemoteNetworkConfig.RemoteNodeNetworks {
				f9f0elem := &svcsdktypes.RemoteNodeNetwork{}
				if f9f0iter.CIDRs != nil {
					f9f0elem.Cidrs = aws.ToStringSlice(f9f0iter.CIDRs)
				}
				f9f0 = append(f9f0, *f9f0elem)
			}
			f9.RemoteNodeNetworks = f9f0
		}
		if r.ko.Spec.RemoteNetworkConfig.RemotePodNetworks != nil {
			f9f1 := []svcsdktypes.RemotePodNetwork{}
			for _, f9f1iter := range r.ko.Spec.RemoteNetworkConfig.RemotePodNetworks {
				f9f1elem := &svcsdktypes.RemotePodNetwork{}
				if f9f1iter.CIDRs != nil {
					f9f1elem.Cidrs = aws.ToStringSlice(f9f1iter.CIDRs)
				}
				f9f1 = append(f9f1, *f9f1elem)
			}
			f9.RemotePodNetworks = f9f1
		}
		res.RemoteNetworkConfig = f9
	}
	if r.ko.Spec.ResourcesVPCConfig != nil {
		f10 := &svcsdktypes.VpcConfigRequest{}
		if r.ko.Spec.ResourcesVPCConfig.EndpointPrivateAccess != nil {
			f10.EndpointPrivateAccess = r.ko.Spec.ResourcesVPCConfig.EndpointPrivateAccess
		}
		if r.ko.Spec.ResourcesVPCConfig.EndpointPublicAccess != nil {
			f10.EndpointPublicAccess = r.ko.Spec.ResourcesVPCConfig.EndpointPublicAccess
		}
		if r.ko.Spec.ResourcesVPCConfig.PublicAccessCIDRs != nil {
			f10.PublicAccessCidrs = aws.ToStringSlice(r.ko.Spec.ResourcesVPCConfig.PublicAccessCIDRs)
		}
		if r.ko.Spec.ResourcesVPCConfig.SecurityGroupIDs != nil {
			f10.SecurityGroupIds = aws.ToStringSlice(r.ko.Spec.ResourcesVPCConfig.SecurityGroupIDs)
		}
		if r.ko.Spec.ResourcesVPCConfig.SubnetIDs != nil {
			f10.SubnetIds = aws.ToStringSlice(r.ko.Spec.ResourcesVPCConfig.SubnetIDs)
		}
		res.ResourcesVpcConfig = f10
	}
	if r.ko.Spec.RoleARN != nil {
		res.RoleArn = r.ko.Spec.RoleARN
	}
	if r.ko.Spec.StorageConfig != nil {
		f12 := &svcsdktypes.StorageConfigRequest{}
		if r.ko.Spec.StorageConfig.BlockStorage != nil {
			f12f0 := &svcsdktypes.BlockStorage{}
			if r.ko.Spec.StorageConfig.BlockStorage.Enabled != nil {
				f12f0.Enabled = r.ko.Spec.StorageConfig.BlockStorage.Enabled
			}
			f12.BlockStorage = f12f0
		}
		res.StorageConfig = f12
	}
	if r.ko.Spec.Tags != nil {
		res.Tags = aws.ToStringMap(r.ko.Spec.Tags)
	}
	if r.ko.Spec.UpgradePolicy != nil {
		f14 := &svcsdktypes.UpgradePolicyRequest{}
		if r.ko.Spec.UpgradePolicy.SupportType != nil {
			f14.SupportType = svcsdktypes.SupportType(*r.ko.Spec.UpgradePolicy.SupportType)
		}
		res.UpgradePolicy = f14
	}
	if r.ko.Spec.Version != nil {
		res.Version = r.ko.Spec.Version
	}
	if r.ko.Spec.ZonalShiftConfig != nil {
		f16 := &svcsdktypes.ZonalShiftConfigRequest{}
		if r.ko.Spec.ZonalShiftConfig.Enabled != nil {
			f16.Enabled = r.ko.Spec.ZonalShiftConfig.Enabled
		}
		res.ZonalShiftConfig = f16
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (*resource, error) {
	return rm.customUpdate(ctx, desired, latest, delta)
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	if clusterDeleting(r) {
		return r, requeueWaitWhileDeleting
	}
	inUse, err := rm.clusterInUse(ctx, r)
	if err != nil {
		return nil, err
	} else if inUse {
		return r, requeueWaitWhileInUse
	}

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteClusterOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteCluster(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteCluster", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteClusterInput, error) {
	res := &svcsdk.DeleteClusterInput{}

	if r.ko.Spec.Name != nil {
		res.Name = r.ko.Spec.Name
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Cluster,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "ResourceLimitExceeded",
		"ResourceNotFound",
		"ResourceInUse",
		"OptInRequired",
		"InvalidParameterCombination",
		"InvalidParameterValue",
		"InvalidParameterException",
		"InvalidQueryParameter",
		"MalformedQueryString",
		"MissingAction",
		"MissingParameter",
		"ValidationError":
		return true
	default:
		return false
	}
}

// newLogging returns a Logging object
// with each the field set by the resource's corresponding spec field.
func (rm *resourceManager) newLogging(
	r *resource,
) *svcsdktypes.Logging {
	res := &svcsdktypes.Logging{}

	if r.ko.Spec.Logging.ClusterLogging != nil {
		resf0 := []svcsdktypes.LogSetup{}
		for _, resf0iter := range r.ko.Spec.Logging.ClusterLogging {
			resf0elem := &svcsdktypes.LogSetup{}
			if resf0iter.Enabled != nil {
				resf0elem.Enabled = resf0iter.Enabled
			}
			if resf0iter.Types != nil {
				resf0elemf1 := []svcsdktypes.LogType{}
				for _, resf0elemf1iter := range resf0iter.Types {
					var resf0elemf1elem string
					resf0elemf1elem = string(*resf0elemf1iter)
					resf0elemf1 = append(resf0elemf1, svcsdktypes.LogType(resf0elemf1elem))
				}
				resf0elem.Types = resf0elemf1
			}
			resf0 = append(resf0, *resf0elem)
		}
		res.ClusterLogging = resf0
	}

	return res
}

// newVpcConfigRequest returns a VpcConfigRequest object
// with each the field set by the resource's corresponding spec field.
func (rm *resourceManager) newVpcConfigRequest(
	r *resource,
) *svcsdktypes.VpcConfigRequest {
	res := &svcsdktypes.VpcConfigRequest{}

	if r.ko.Spec.ResourcesVPCConfig.EndpointPrivateAccess != nil {
		res.EndpointPrivateAccess = r.ko.Spec.ResourcesVPCConfig.EndpointPrivateAccess
	}
	if r.ko.Spec.ResourcesVPCConfig.EndpointPublicAccess != nil {
		res.EndpointPublicAccess = r.ko.Spec.ResourcesVPCConfig.EndpointPublicAccess
	}
	if r.ko.Spec.ResourcesVPCConfig.PublicAccessCIDRs != nil {
		res.PublicAccessCidrs = aws.ToStringSlice(r.ko.Spec.ResourcesVPCConfig.PublicAccessCIDRs)
	}
	if r.ko.Spec.ResourcesVPCConfig.SecurityGroupIDs != nil {
		res.SecurityGroupIds = aws.ToStringSlice(r.ko.Spec.ResourcesVPCConfig.SecurityGroupIDs)
	}
	if r.ko.Spec.ResourcesVPCConfig.SubnetIDs != nil {
		res.SubnetIds = aws.ToStringSlice(r.ko.Spec.ResourcesVPCConfig.SubnetIDs)
	}

	return res
}
