// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package pod_identity_association

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/eks"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/eks-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EKS{}
	_ = &svcapitypes.PodIdentityAssociation{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribePodIdentityAssociationOutput
	resp, err = rm.sdkapi.DescribePodIdentityAssociationWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribePodIdentityAssociation", err)
	if err != nil {
		if reqErr, ok := ackerr.AWSRequestFailure(err); ok && reqErr.StatusCode() == 404 {
			return nil, ackerr.NotFound
		}
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "ResourceNotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if resp.Association.AssociationArn != nil {
		ko.Status.AssociationARN = resp.Association.AssociationArn
	} else {
		ko.Status.AssociationARN = nil
	}
	if resp.Association.AssociationId != nil {
		ko.Status.AssociationID = resp.Association.AssociationId
	} else {
		ko.Status.AssociationID = nil
	}
	if resp.Association.ClusterName != nil {
		ko.Spec.ClusterName = resp.Association.ClusterName
	} else {
		ko.Spec.ClusterName = nil
	}
	if resp.Association.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.Association.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.Association.ModifiedAt != nil {
		ko.Status.ModifiedAt = &metav1.Time{*resp.Association.ModifiedAt}
	} else {
		ko.Status.ModifiedAt = nil
	}
	if resp.Association.Namespace != nil {
		ko.Spec.Namespace = resp.Association.Namespace
	} else {
		ko.Spec.Namespace = nil
	}
	if resp.Association.RoleArn != nil {
		ko.Spec.RoleARN = resp.Association.RoleArn
	} else {
		ko.Spec.RoleARN = nil
	}
	if resp.Association.ServiceAccount != nil {
		ko.Spec.ServiceAccount = resp.Association.ServiceAccount
	} else {
		ko.Spec.ServiceAccount = nil
	}
	if resp.Association.Tags != nil {
		f8 := map[string]*string{}
		for f8key, f8valiter := range resp.Association.Tags {
			var f8val string
			f8val = *f8valiter
			f8[f8key] = &f8val
		}
		ko.Spec.Tags = f8
	} else {
		ko.Spec.Tags = nil
	}

	rm.setStatusDefaults(ko)
	if resp.Association.AssociationArn != nil {
		ko.Status.ACKResourceMetadata.ARN = (*ackv1alpha1.AWSResourceName)(resp.Association.AssociationArn)
	}
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.ClusterName == nil || r.ko.Status.AssociationID == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribePodIdentityAssociationInput, error) {
	res := &svcsdk.DescribePodIdentityAssociationInput{}

	if r.ko.Status.AssociationID != nil {
		res.SetAssociationId(*r.ko.Status.AssociationID)
	}
	if r.ko.Spec.ClusterName != nil {
		res.SetClusterName(*r.ko.Spec.ClusterName)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreatePodIdentityAssociationOutput
	_ = resp
	resp, err = rm.sdkapi.CreatePodIdentityAssociationWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreatePodIdentityAssociation", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.Association.AssociationArn != nil {
		ko.Status.AssociationARN = resp.Association.AssociationArn
	} else {
		ko.Status.AssociationARN = nil
	}
	if resp.Association.AssociationId != nil {
		ko.Status.AssociationID = resp.Association.AssociationId
	} else {
		ko.Status.AssociationID = nil
	}
	if resp.Association.ClusterName != nil {
		ko.Spec.ClusterName = resp.Association.ClusterName
	} else {
		ko.Spec.ClusterName = nil
	}
	if resp.Association.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.Association.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.Association.ModifiedAt != nil {
		ko.Status.ModifiedAt = &metav1.Time{*resp.Association.ModifiedAt}
	} else {
		ko.Status.ModifiedAt = nil
	}
	if resp.Association.Namespace != nil {
		ko.Spec.Namespace = resp.Association.Namespace
	} else {
		ko.Spec.Namespace = nil
	}
	if resp.Association.RoleArn != nil {
		ko.Spec.RoleARN = resp.Association.RoleArn
	} else {
		ko.Spec.RoleARN = nil
	}
	if resp.Association.ServiceAccount != nil {
		ko.Spec.ServiceAccount = resp.Association.ServiceAccount
	} else {
		ko.Spec.ServiceAccount = nil
	}
	if resp.Association.Tags != nil {
		f8 := map[string]*string{}
		for f8key, f8valiter := range resp.Association.Tags {
			var f8val string
			f8val = *f8valiter
			f8[f8key] = &f8val
		}
		ko.Spec.Tags = f8
	} else {
		ko.Spec.Tags = nil
	}

	rm.setStatusDefaults(ko)
	if resp.Association.AssociationArn != nil {
		ko.Status.ACKResourceMetadata.ARN = (*ackv1alpha1.AWSResourceName)(resp.Association.AssociationArn)
	}
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreatePodIdentityAssociationInput, error) {
	res := &svcsdk.CreatePodIdentityAssociationInput{}

	if r.ko.Spec.ClientRequestToken != nil {
		res.SetClientRequestToken(*r.ko.Spec.ClientRequestToken)
	}
	if r.ko.Spec.ClusterName != nil {
		res.SetClusterName(*r.ko.Spec.ClusterName)
	}
	if r.ko.Spec.Namespace != nil {
		res.SetNamespace(*r.ko.Spec.Namespace)
	}
	if r.ko.Spec.RoleARN != nil {
		res.SetRoleArn(*r.ko.Spec.RoleARN)
	}
	if r.ko.Spec.ServiceAccount != nil {
		res.SetServiceAccount(*r.ko.Spec.ServiceAccount)
	}
	if r.ko.Spec.Tags != nil {
		f5 := map[string]*string{}
		for f5key, f5valiter := range r.ko.Spec.Tags {
			var f5val string
			f5val = *f5valiter
			f5[f5key] = &f5val
		}
		res.SetTags(f5)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if delta.DifferentAt("Spec.Tags") {
		err := syncTags(
			ctx, rm.sdkapi, rm.metrics,
			string(*desired.ko.Status.ACKResourceMetadata.ARN),
			desired.ko.Spec.Tags, latest.ko.Spec.Tags,
		)
		if err != nil {
			return nil, err
		}
	}
	if !delta.DifferentExcept("Spec.Tags") {
		return desired, nil
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.UpdatePodIdentityAssociationOutput
	_ = resp
	resp, err = rm.sdkapi.UpdatePodIdentityAssociationWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdatePodIdentityAssociation", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.Association.AssociationArn != nil {
		ko.Status.AssociationARN = resp.Association.AssociationArn
	} else {
		ko.Status.AssociationARN = nil
	}
	if resp.Association.AssociationId != nil {
		ko.Status.AssociationID = resp.Association.AssociationId
	} else {
		ko.Status.AssociationID = nil
	}
	if resp.Association.ClusterName != nil {
		ko.Spec.ClusterName = resp.Association.ClusterName
	} else {
		ko.Spec.ClusterName = nil
	}
	if resp.Association.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.Association.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.Association.ModifiedAt != nil {
		ko.Status.ModifiedAt = &metav1.Time{*resp.Association.ModifiedAt}
	} else {
		ko.Status.ModifiedAt = nil
	}
	if resp.Association.Namespace != nil {
		ko.Spec.Namespace = resp.Association.Namespace
	} else {
		ko.Spec.Namespace = nil
	}
	if resp.Association.RoleArn != nil {
		ko.Spec.RoleARN = resp.Association.RoleArn
	} else {
		ko.Spec.RoleARN = nil
	}
	if resp.Association.ServiceAccount != nil {
		ko.Spec.ServiceAccount = resp.Association.ServiceAccount
	} else {
		ko.Spec.ServiceAccount = nil
	}
	if resp.Association.Tags != nil {
		f8 := map[string]*string{}
		for f8key, f8valiter := range resp.Association.Tags {
			var f8val string
			f8val = *f8valiter
			f8[f8key] = &f8val
		}
		ko.Spec.Tags = f8
	} else {
		ko.Spec.Tags = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdatePodIdentityAssociationInput, error) {
	res := &svcsdk.UpdatePodIdentityAssociationInput{}

	if r.ko.Status.AssociationID != nil {
		res.SetAssociationId(*r.ko.Status.AssociationID)
	}
	if r.ko.Spec.ClientRequestToken != nil {
		res.SetClientRequestToken(*r.ko.Spec.ClientRequestToken)
	}
	if r.ko.Spec.ClusterName != nil {
		res.SetClusterName(*r.ko.Spec.ClusterName)
	}
	if r.ko.Spec.RoleARN != nil {
		res.SetRoleArn(*r.ko.Spec.RoleARN)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeletePodIdentityAssociationOutput
	_ = resp
	resp, err = rm.sdkapi.DeletePodIdentityAssociationWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeletePodIdentityAssociation", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeletePodIdentityAssociationInput, error) {
	res := &svcsdk.DeletePodIdentityAssociationInput{}

	if r.ko.Status.AssociationID != nil {
		res.SetAssociationId(*r.ko.Status.AssociationID)
	}
	if r.ko.Spec.ClusterName != nil {
		res.SetClusterName(*r.ko.Spec.ClusterName)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.PodIdentityAssociation,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
